{
    "dbConnectionSettings": {
        "host": "localhost",
        "userName": "root",
        "password": "",
        "name": "anime-db"
    },
    "querySettings": {
        "getAnime": {
            "query": "SELECT animelist.anime_id AS animeId, animelist.name, animelist.genre AS genre, animelist.type AS type, NULLIF(COUNT(ratinglist.user_id), 0) AS views, animelist.episodes, AVG(ratinglist.rating) AS rating FROM `ratinglist` JOIN animelist ON ratinglist.anime_id = animelist.anime_id WHERE animelist.anime_id = ?",
            "XMLSettings": {
                "groupedNodeName": "anime",
                "rootNodeName": "root"
            },
            "schemaName": "getAnime"
        },
        "getAllAnimes": {
            "query": "SELECT animelist.anime_id AS animeId, animelist.name, animelist.genre AS genre, animelist.type AS type, COUNT(ratinglist.user_id) AS views, animelist.episodes, AVG(ratinglist.rating) AS rating FROM `ratinglist` JOIN animelist ON ratinglist.anime_id = animelist.anime_id GROUP BY ratinglist.anime_id",
            "XMLSettings": {
                "groupedNodeName": "anime",
                "rootNodeName": "root"
            },
            "schemaName": "getAllAnimes"
        },
        "getAnimeRatings": {
            "query": "SELECT ratinglist.anime_id AS animeId, ratinglist.user_id as userId, ratinglist.rating AS rating FROM `ratinglist` WHERE `anime_id` = ? AND `rating` > ?",
            "XMLSettings": {
                "groupedNodeName": "animeUserRating",
                "rootNodeName": "root"
            },
            "schemaName": "getAnimeRatings" 
        },
        "getAllAnimeRatings": {
            "query": "SELECT ratinglist.anime_id AS animeId, ratinglist.user_id AS userId, ratinglist.rating AS rating FROM `ratinglist` WHERE rating > ? ORDER BY `animeId`",
            "XMLSettings": {
                "groupedNodeName": "animeUserRating",
                "rootNodeName": "root"
            },
            "schemaName": "getAllAnimeRatings"
        },
        "getTopWatchedAnime": {
            "query": "SELECT animelist.anime_id AS animeId, animelist.name, animelist.genre AS genre, animelist.type AS type, COUNT(ratinglist.user_id) AS views, animelist.episodes, AVG(ratinglist.rating) AS rating FROM `ratinglist` JOIN animelist ON ratinglist.anime_id = animelist.anime_id GROUP BY ratinglist.anime_id ORDER BY views DESC LIMIT ?",
            "XMLSettings": {
                "groupedNodeName": "anime",
                "rootNodeName": "root"
            },
            "schemaName": "getTopWatchedAnime"
        },
        "getAllTopWatchedAnimes": {
            "query": "SELECT animelist.anime_id AS animeId, animelist.name, animelist.genre AS genre, animelist.type AS type, COUNT(ratinglist.user_id) AS views, animelist.episodes, AVG(ratinglist.rating) AS rating FROM `ratinglist` JOIN animelist ON ratinglist.anime_id = animelist.anime_id GROUP BY ratinglist.anime_id ORDER BY views DESC",
            "XMLSettings": {
                "groupedNodeName": "anime",
                "rootNodeName": "root"
            },
            "schemaName": "getAllTopWatchedAnimes"
        },
        "getNumberOfMaleFemaleUsers": {
            "query": "SELECT (SELECT COUNT(ratinglist.user_id) FROM ratinglist WHERE ratinglist.anime_id = ?) AS totalViewers, (SELECT COUNT(gender) FROM ratinglist JOIN userlist ON userlist.user_id = ratinglist.user_id WHERE userlist.gender = 'Male' AND ratinglist.anime_id = ?) AS male, (SELECT COUNT(gender) FROM ratinglist JOIN userlist ON userlist.user_id = ratinglist.user_id WHERE userlist.gender = 'Female' AND ratinglist.anime_id = ?) AS female FROM animelist JOIN ratinglist ON ratinglist.anime_id = animelist.anime_id WHERE ratinglist.anime_id = ? GROUP BY Male",
            "XMLSettings": {
                "groupedNodeName": "gendersDifference",
                "rootNodeName": "root"
            },
            "schemaName": "getAnimeGenderComparison"
        },
        "getAllNumberOfMaleFemaleViewers": {
            "query": "SELECT ( SELECT COUNT(ratinglist.user_id) FROM ratinglist ) AS totalViewers, ( SELECT COUNT(gender) FROM ratinglist JOIN userlist ON userlist.user_id = ratinglist.user_id WHERE userlist.gender = 'Male' ) AS male, ( SELECT COUNT(gender) FROM ratinglist JOIN userlist ON userlist.user_id = ratinglist.user_id WHERE userlist.gender = 'Female' ) AS female FROM animelist JOIN ratinglist ON ratinglist.anime_id = animelist.anime_id GROUP BY Male",
            "XMLSettings": {
                "groupedNodeName": "gendersDifference",
                "rootNodeName": "root"
            },
            "schemaName": "getAllAnimeGenderComparison"
        },
        "getAnimeUsersStatistics": {
            "query": "SELECT userlist.user_id AS userId, userlist.username AS username, userlist.user_completed AS completed, userlist.user_dropped AS dropped, userlist.user_onhold AS onHold, userlist.user_plantowatch AS planToWatch, userlist.user_days_spent_watching AS watchTime, userlist.stats_rewatched AS rewatched, userlist.location, userlist.gender, userlist.join_date AS joinDate, ratinglist.rating, TIMESTAMPDIFF( YEAR, userlist.birth_date, '2018-06-29' ) AS age FROM `ratinglist` JOIN userlist ON ratinglist.user_id = userlist.user_id WHERE anime_id = ?",
            "XMLSettings": {
                "groupedNodeName": "user",
                "rootNodeName": "root"
            },
            "schemaName": "getAnimeUsersStatistics"
        },
        "getAllUsersStatistics": {
            "query": "SELECT userlist.user_id AS userId, userlist.username AS username, userlist.user_completed AS completed, userlist.user_dropped AS dropped, userlist.user_onhold AS onHold, userlist.user_plantowatch AS planToWatch, userlist.user_days_spent_watching AS watchTime, userlist.stats_rewatched AS rewatched, userlist.location, userlist.gender, userlist.join_date AS joinDate, ratinglist.rating, TIMESTAMPDIFF( YEAR, userlist.birth_date, '2018-06-29' ) AS age FROM `ratinglist` JOIN userlist ON ratinglist.user_id = userlist.user_id",
            "XMLSettings": {
                "groupedNodeName": "user",
                "rootNodeName": "root"
            },
            "schemaName": "getAllUsersStatistics"
        },
        "postAnime": {
            "query": "INSERT INTO `animelist`(`name`, `genre`, `type`, `episodes`, `rating`, `members`) VALUES (?,?,?,?,?,?)"
        },
        "postUser": {
            "query": "INSERT INTO `userlist`( `username`, `user_watching`, `user_completed`, `user_onhold`, `user_dropped`, `user_plantowatch`, `user_days_spent_watching`, `gender`, `location`, `birth_date`, `access_rank`, `join_date`, `stats_mean_score`, `stats_rewatched`) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?);"
        },
        "putAnime": {
            "query": "UPDATE `animelist` SET `name`=?,`genre`=?,`type`=?,`episodes`=?,`rating`=?,`members`=? WHERE `anime_id`= ?"
        },
        "putUser": {
            "query": "UPDATE `userlist` SET `username` = ?, `user_watching` = ?, `user_completed` = ?, `user_onhold` = ?, `user_dropped` = ?, `user_plantowatch` = ?, `user_days_spent_watching` = ?, `gender` = ?, `location` = ?, `birth_date` = ?, `access_rank` = ?, `join_date` = ?, `stats_mean_score` = ?, `stats_rewatched` = ? WHERE userlist.user_id = ?;"
        },
        "deleteAnime": {
            "query": "DELETE FROM `animelist` WHERE `anime_id` = ?;"
        },
        "deleteUser": {
            "query": "DELETE FROM `userlist` WHERE `user_id` = ?;"
        }
    }
}